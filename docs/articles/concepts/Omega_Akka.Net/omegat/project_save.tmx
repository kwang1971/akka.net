<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE tmx SYSTEM "tmx11.dtd">
<tmx version="1.1">
  <header creationtool="OmegaT" o-tmf="OmegaT TMX" adminlang="EN-US" datatype="plaintext" creationtoolversion="OmegaT-3.6.0" segtype="sentence" srclang="EN-US"/>
  <body>
<!-- Default translations -->
    <tu>
      <tuv lang="EN-US">
        <seg>![Actor path](/images/ActorPath.png)</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="kwang1971" changedate="20180319T091514Z" creationid="kwang1971" creationdate="20180319T091514Z">
        <seg>![Actor path](/images/ActorPath.png)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Actor References, Paths and Addresses</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="kwang1971" changedate="20180319T090717Z" creationid="kwang1971" creationdate="20180319T090717Z">
        <seg># Actor 引用, 路径和地址</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## What is an Actor Path?</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="kwang1971" changedate="20180321T151628Z" creationid="kwang1971" creationdate="20180321T151628Z">
        <seg>## 什么是 Actor Path?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## What is an Actor Reference?</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="kwang1971" changedate="20180319T100325Z" creationid="kwang1971" creationdate="20180319T100325Z">
        <seg>## 什么是 Actor Reference?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>### Actor Path Anchors
Each actor path has an address component, describing the protocol and location by which the corresponding actor is reachable, followed by the names of the actors in the hierarchy from the root up.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="kwang1971" changedate="20180321T153317Z" creationid="kwang1971" creationdate="20180321T153317Z">
        <seg>### actor路径锚 每个actor路径都有一个地址组件，描述了相应actor可访问的协议和位置，后面跟着层次结构中actor的名称.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>### What is the Difference Between Actor Reference and Path?</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="kwang1971" changedate="20180321T152250Z" creationid="kwang1971" creationdate="20180321T152250Z">
        <seg>### Actor引用和路径的区别?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>- And then there are some one-off internal implementations which you should never really see:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="kwang1971" changedate="20180321T151239Z" creationid="kwang1971" creationdate="20180321T151239Z">
        <seg>- 然后有一些你永远不会看到的一次性内部实现：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>- Local actor references when remoting is enabled are used by actor systems which support networking functions for those references which represent actors within the same CLR.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="kwang1971" changedate="20180321T145547Z" creationid="kwang1971" creationdate="20180321T145547Z">
        <seg>- 启用远程处理时的本地Actor引用由Actor系统使用，该Actor支持表示同一CLR内的Actors的那些引用的联网功能.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>- Purely local actor references are used by actor systems which are not configured to support networking functions.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="kwang1971" changedate="20180319T101647Z" creationid="kwang1971" creationdate="20180319T101647Z">
        <seg>- 单纯本地actor引用被actor 系统使用，没有配置支持网络功能 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>- Remote actor references represent actors which are reachable using remote communication, i.e. sending messages to them will serialize the messages transparently and send them to the remote CLR.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="kwang1971" changedate="20180321T150036Z" creationid="kwang1971" creationdate="20180321T150036Z">
        <seg>-远程Actor引用代表使用远程通信可访问的Actor，即向他们发送消息将透明地序列化消息并将消息发送给远程CLR.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>- The first logging service started before actually firing up actor creation facilities is a fake actor reference which accepts log events and prints them directly to standard output; it is `Logging.StandardOutLogger`.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="kwang1971" changedate="20180321T151612Z" creationid="kwang1971" creationdate="20180321T151612Z">
        <seg>- 在实际启动actor创建设施之前启动的第一个日志记录服务是假的actor引用，它接受日志事件并将它们直接打印到标准输出; 它是`Logging.StandardOutLogger`。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>- There are several special types of actor references which behave like local actor references for all practical purposes:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="kwang1971" changedate="20180321T150336Z" creationid="kwang1971" creationdate="20180321T150336Z">
        <seg>- 出于各种实际目的，有几种特殊类型的actor 引用，行为类似于本地Actor引用：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>- There is a subtype of local actor references which is used for routers.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="kwang1971" changedate="20180321T145839Z" creationid="kwang1971" creationdate="20180321T145839Z">
        <seg>- 存在本地Actor引用的子类型作为路由器使用</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>- There is an actor reference which does not represent an actor but acts only as a pseudo-supervisor for the root guardian, we call it "the one who walks the bubbles of space-time".</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="kwang1971" changedate="20180321T151436Z" creationid="kwang1971" creationdate="20180321T151436Z">
        <seg>- 有一个actor的引用不代表actor，但只作为根监护人的伪监督者，我们称之为“走过时空泡沫的人the one who walks the bubbles of space-time”。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>- `DeadLetterActorRef` is the default implementation of the dead letters service to which Akka routes all messages whose destinations are shut down or non-existent.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="kwang1971" changedate="20180321T151036Z" creationid="kwang1971" creationdate="20180321T151036Z">
        <seg>-`DeadLetterActorRef`是Akka死信函服务的默认实现，Akka将目的地被关闭或不存在的所有的消息路由到这个地址。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>- `EmptyLocalActorRef` is what Akka returns when looking up a non-existent local actor path: it is equivalent to a `DeadLetterActorRef`, but it retains its path so that Akka can send it over the network and compare it to other existing actor references for that path, some of which might have been obtained before the actor died.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="kwang1971" changedate="20180321T151211Z" creationid="kwang1971" creationdate="20180321T151211Z">
        <seg>- ``EmptyLocalActorRef`是Akka在查找不存在的本地actor路径时返回的内容：它相当于一个`DeadLetterActorRef`，但它保留它的路径，以便Akka可以通过网络发送它并将它与其他现有的actor引用进行比较 那条道路，其中一些可能是在actor死亡之前获得的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>- `PromiseActorRef` is the special representation of a `Task` for the purpose of being completed by the response from an actor.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="kwang1971" changedate="20180321T150611Z" creationid="kwang1971" creationdate="20180321T150611Z">
        <seg>-`PromiseActorRef`是为了通过某个actor的回应完成的`Task`的特殊表示。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An actor path consists of an anchor, which identifies the actor system, followed by the concatenation of the path elements, from root guardian to the designated actor; the path elements are the names of the traversed actors and are separated by slashes.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="kwang1971" changedate="20180321T152132Z" creationid="kwang1971" creationdate="20180321T152132Z">
        <seg>一个actor路径由一个锚点组成，该锚点标识actor系统，然后是从根监护人到指定actor的路径元素的连接; 路径元素是遍历actor的名称，并用斜杠分隔。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An actor reference designates a single actor and the life-cycle of the reference matches that actor's life-cycle; an actor path represents a name which may or may not be inhabited by an actor and the path itself does not have a life-cycle, it never becomes invalid.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="kwang1971" changedate="20180321T152855Z" creationid="kwang1971" creationdate="20180321T152855Z">
        <seg></seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An actor reference is a subtype of `ActorRef`, whose foremost purpose is to support sending messages to the actor it represents.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="kwang1971" changedate="20180319T100638Z" creationid="kwang1971" creationdate="20180319T100638Z">
        <seg>一个 actor 引用是 `ActorRef`的一个子类型, 最主要的用途是支持发送消息到它代表的actor。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An actor reference to the old incarnation is not valid for the new incarnation.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="kwang1971" changedate="20180321T152751Z" creationid="kwang1971" creationdate="20180321T152751Z">
        <seg></seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Conversely, during message processing the actor has access to a reference representing the sender of the current message through the sender method.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="kwang1971" changedate="20180319T101217Z" creationid="kwang1971" creationdate="20180319T101217Z">
        <seg>反过来，在消息处理过程中， actor通过Sender方法访问当前收到的消息的发送者的引用。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Each actor has access to its canonical (local) reference through the `Self` property; this reference is also included as sender reference by default for all messages sent to other actors.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="kwang1971" changedate="20180319T101001Z" creationid="kwang1971" creationdate="20180319T101001Z">
        <seg>每一个 actor 通过`Self`属性访问它的规范 (本地l)引用，这个引用也是缺省包含在它发到其他actor的所有消息中，作为sender .</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Examples are:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="kwang1971" changedate="20180321T153347Z" creationid="kwang1971" creationdate="20180321T153347Z">
        <seg>例子如下:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In order to also be reachable when sent to other network nodes, these references include protocol and remote addressing information.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="kwang1971" changedate="20180321T145652Z" creationid="kwang1971" creationdate="20180321T145652Z">
        <seg>为了在发送到其他网络节点时也可以访问，这些引用包括协议和远程寻址信息.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is not the same actor.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="kwang1971" changedate="20180321T152757Z" creationid="kwang1971" creationdate="20180321T152757Z">
        <seg></seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It ties into the central idea that [Actor Systems](xref:actor-systems) form intrinsic supervision hierarchies as well as that communication between actors is transparent with respect to their placement across multiple network nodes.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="kwang1971" changedate="20180319T091511Z" creationid="kwang1971" creationdate="20180319T091511Z">
        <seg>这关系到中心思想 [Actor Systems](xref:actor-systems) 形成内在的监督层次和在跨多个网络节点的位置上，actors之间的通信是透明的</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Its logical structure is the same as for the aforementioned local references, but sending a message to them dispatches to one of their children directly instead.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="kwang1971" changedate="20180321T145926Z" creationid="kwang1971" creationdate="20180321T145926Z">
        <seg>它的逻辑结构与上述的本地引用相同，但是发送消息直接发送给他们的一个孩子。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Messages sent to the old actor reference will not be delivered to the new incarnation even though they have the same path.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="kwang1971" changedate="20180321T153038Z" creationid="kwang1971" creationdate="20180321T152747Z">
        <seg>actor引用指定单个actor，引用的生命周期与actor的生命周期匹配; 一个actor路径代表一个actor可能会或可能不会居住的名字，而路径本身没有一个生命周期，它永远不会失效。您可以创建actor路径而不创建actor，但不能创建演员引用而不创建相应的Actor。您可以创建一个actor，终止它，然后使用相同的actor路径创建一个新actor。新创建的actor是actor的新角色。这不是同一个actor。一个actor引用旧的化身不适用于新的化身。发送给旧actor引用的消息即使具有相同的路径，也不会传递给新的actor。Messages sent to the old actor reference will not be delivered to the new incarnation even though they have the same path.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Since actors are created in a strictly hierarchical fashion, there exists a unique sequence of actor names given by recursively following the supervision links between child and parent down towards the root of the actor system.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="kwang1971" changedate="20180321T151958Z" creationid="kwang1971" creationdate="20180321T151958Z">
        <seg>由于actor是以严格等级的方式创建的，因此存在一系列独特的actor名字 ，这些actor名字通过递归地跟随儿童和父母之间的监督链接向下Actor系统的根部而给出的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The above image displays the relationship between the most important entities within an actor system, please read on for the details.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="kwang1971" changedate="20180319T091705Z" creationid="kwang1971" creationdate="20180319T091610Z">
        <seg>上面的图片显示了一个actor系统中最重要的实体之间的关系，请详细阅读。.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The newly created actor is a new incarnation of the actor.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="kwang1971" changedate="20180321T152803Z" creationid="kwang1971" creationdate="20180321T152803Z">
        <seg></seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There are several different types of actor references that are supported depending on the configuration of the actor system:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="kwang1971" changedate="20180319T101347Z" creationid="kwang1971" creationdate="20180319T101347Z">
        <seg>有几种不同类型的actor引用，这取决于参与者系统的配置：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These actor references will not function if sent across a network connection to a remote CLR.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="kwang1971" changedate="20180321T145225Z" creationid="kwang1971" creationdate="20180321T145225Z">
        <seg>如果通过网络连接发送到远程CLR，这些Actor引用将不起作用.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This chapter describes how actors are identified and located within a possibly distributed actor system.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="kwang1971" changedate="20180319T091233Z" creationid="kwang1971" creationdate="20180319T091233Z">
        <seg>本章描述了actors是如何在一个可能分布的参与者系统中被识别和定位的.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This sequence can be seen as enclosing folders in a file system, hence we adopted the name "path" to refer to it, although actor hierarchy has some fundamental difference from file system hierarchy.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="kwang1971" changedate="20180321T152033Z" creationid="kwang1971" creationdate="20180321T152033Z">
        <seg>这个序列可以看作是将文件夹包含在一个文件系统中，因此我们采用名称“path”来引用它，尽管actor层次结构与文件系统层次结构有一些根本的区别。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can create an actor path without creating an actor, but you cannot create an actor reference without creating corresponding actor.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="kwang1971" changedate="20180321T152818Z" creationid="kwang1971" creationdate="20180321T152818Z">
        <seg></seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can create an actor, terminate it, and then create a new actor with the same actor path.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="kwang1971" changedate="20180321T152809Z" creationid="kwang1971" creationdate="20180321T152809Z">
        <seg></seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`ICanTell.Ask` creates this actor reference.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="kwang1971" changedate="20180321T150710Z" creationid="kwang1971" creationdate="20180321T150710Z">
        <seg>`ICanTell.Ask`创建这个actor引用。</seg>
      </tuv>
    </tu>
<!-- Alternative translations -->
  </body>
</tmx>
